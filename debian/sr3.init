#! /bin/bash
### BEGIN INIT INFO
# Provides:          sarracenia 
# Required-Start:    $remote_fs $syslog
# Required-Stop:     $remote_fs $syslog
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: px initscript
# Description:       initscript for px program, this file should be place in /etc/init.d.
### END INIT INFO

# Author: Jun Hu <jun.hu@ec.gc.ca>
#
# Do NOT "set -e"

# PATH should only include /usr/* if it runs after the mountnfs.sh script
PATH=/sbin:/usr/sbin:/bin:/usr/bin
DESC="sarracenia program"
NAME=sarra
DAEMON_USER=sarra
DAEMON=/usr/bin/sr
DAEMON_ARGS=" "
PIDFILE=/var/run/$NAME.pid
SCRIPTNAME=/etc/init.d/$NAME
CMD=`$DAEMON status | grep "is running" | wc -l`
ENABLED="false"

# Define LSB log_* functions.
# Depend on lsb-base (>= 3.0-6) to ensure that this file is present.
. /lib/lsb/init-functions

# Exit if the package is not installed
[ -x "$DAEMON" ] || exit 0

# Read configuration variable file if it is present
[ -r /etc/default/$NAME ] && . /etc/default/$NAME

if [ "$ENABLED" != "true" ]; then
   log_daemon_msg "Service $NAME disabled"
   exit 3
fi

# Load the VERBOSE setting and other rcS variables
. /lib/init/vars.sh

#
# Function that checks if the program px is running or not.
# count the running instance of px, return 0 if at least 1 instance is running; else return 1. 
#
is_running() {
	if (($CMD > 0)); then
		return 0
	else
		return 1
	fi
}
#
# Function that starts the daemon/service
#
do_start()
{
	# Return
	#   0 if daemon has been started
	#   1 if daemon was already running
	#   2 if daemon could not be started
	is_running &&  return 1 
	if [ `whoami` = $DAEMON_USER ]; then
		$DAEMON start &&  return 0 
        else
		su - $DAEMON_USER -c "$DAEMON start" &&  return 0 
	fi
	is_running || return 2 
	
}

#
# Function that stops the daemon/service
#
do_stop()
{
	# Return
	#   0 if daemon has been stopped
	#   1 if daemon was already stopped
	#   2 if daemon could not be stopped
	#   other if a failure occurred
	if [ `whoami` = $NAME ]; then
		is_running && $DAEMON stop &&  return 0 || return 1
	else
		is_running && su - $DAEMON_USER -c "$DAEMON stop" &&  return 0 || return 1
	fi
	is_running && return 2 
	
}

#
# Function that sends a SIGHUP to the daemon/service
#
do_reload() {
	#
	# If the daemon can reload its configuration without
	# restarting (for example, when it is sent a SIGHUP),
	# then implement that here.
	#
	#start-stop-daemon --stop --signal 1 --quiet --pidfile $PIDFILE --name $NAME
	$DAEMON reload > /dev/null 2>&1

	return 0
}

case "$1" in
  start)
	[ "$VERBOSE" != no ] && log_daemon_msg "Starting $DESC" "$NAME"
	do_start
	case "$?" in
		0|1) [ "$VERBOSE" != no ] && log_end_msg 0 ;;
		2) [ "$VERBOSE" != no ] && log_end_msg 1 ;;
	esac
	;;
  stop)
	[ "$VERBOSE" != no ] && log_daemon_msg "Stopping $DESC" "$NAME"
	do_stop
	case "$?" in
		0|1) [ "$VERBOSE" != no ] && log_end_msg 0 ;;
		2) [ "$VERBOSE" != no ] && log_end_msg 1 ;;
	esac
	;;
  status)
       	is_running && log_daemon_msg "$NAME is running" && exit 0 || log_daemon_msg "$NAME is not running" && exit 3 
        #status_of_proc "$DAEMON" "$NAME" && exit 0 || exit $?
       ;;
  reload)
	#
	# If do_reload() is not implemented then leave this commented out
	# and leave 'force-reload' as an alias for 'restart'.
	#
	log_daemon_msg "Reloading $DESC" "$NAME"
	if [ `whoami` = $DAEMON_USER ]; then
		$DAEMON reload
        else
		su - $DAEMON_USER  -c "$DAEMON reload"
	fi
	#do_reload
	log_end_msg $?
	;;
  restart|force-reload)
	#
	# If the "reload" option is implemented then remove the
	# 'force-reload' alias
	#
	log_daemon_msg "Restarting $DESC" "$NAME"
	if [ `whoami` = $DAEMON_USER ]; then
		$DAEMON restart
        else
		su - $DAEMON_USER  -c "$DAEMON restart"
	fi
	;;
  *)
	#echo "Usage: $SCRIPTNAME {start|stop|restart|reload|force-reload}" >&2
	echo "Usage: $SCRIPTNAME {start|stop|status|restart|reload|force-reload}" >&2
	exit 3
	;;
esac

:
